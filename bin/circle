#!/usr/bin/env ruby
require "thor"
require "open3"
require_relative "../lib/initializer.rb"

class Circle < Thor

  def initialize
    @username = Config.get(:username)
    @project = Config.get(:project)
    super
  end

  desc "retry", "retries last build for this branch unless build number is supplied"
  def retry(build=nil)
    build = get_last_build_for_branch unless build
    check_username_and_project
    CircleCi::Build.retry(@username, @project, @build || get_last_build_for_branch)
  end

  desc "cancel", "cancels last build for this branch unless build number is supplied"
  def cancel(build=nil)
    build = get_last_build_for_branch unless build
    check_username_and_project
    CircleCi::Build.cancel(@username, @project, @build || get_last_build_for_branch)
  end

  desc "status", "shows the status of the last build and failures unless a build number is supplied"
  def status(build=nil)
    build = get_last_build_for_branch unless build
    puts "beep boop here is the status of the most recent build:"
  end

  no_commands do
    def check_username_and_project
      raise "this is a terrible method why do you even have it? are you some sort of procedural scum? just write your code correctly next time." unless defined? @username && defined? @project
    end

    def get_last_build_for_branch
      res = CircleCi::Project.recent_builds_branch(@username, @project, current_branch)
      raise "something went haywire with that request for recent_builds_branch on branch: #{current_branch}
              response body is : #{res.body}" unless res.success?
      res.body.first["build_num"]
    end

    def current_branch
      Open3.popen3("git symbolic-ref --short HEAD") do |stdin, std_out, std_err, wait_thr|
        raise "something broke" unless std_err.read == ""
        branch = std_out.read
        branch.gsub("\n", "")
      end
    end
  end
end

Circle.start(ARGV)
