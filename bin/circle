#!/usr/bin/env ruby
require "thor"
require "open3"
require_relative "../lib/initializer.rb"

class Circle < Thor
  class_option :verbose, type: :boolean, aliases: :v
  class_option :username, aliases: :u
  class_option :project, aliases: :p
  class_option :circle_api_token, aliases: :token

  def initialize(*args)
    super(*args)
    @username = options[:username] || MyConfig.get("username")
    @project = options[:project] || MyConfig.get("project")
  end

  desc "configure", "configures your gem"
  def configure
    config_query("username")
    config_query("project")
    config_query("circle_api_token")
  end

  desc "retry", "retries last build for this branch unless build number is supplied"
  def retry(build=nil)
    check_set("username", @username)
    check_set("project", @project)
    check_set("circle_api_token", MyConfig.get("circle_api_token"))
    build = get_last_build_for_branch unless build
    CircleCi::Build.retry(@username, @project, @build || get_last_build_for_branch)
  end

  desc "cancel", "cancels last build for this branch unless build number is supplied"
  def cancel(build=nil)
    build = get_last_build_for_branch unless build
    CircleCi::Build.cancel(@username, @project, @build || get_last_build_for_branch)
  end

  desc "status", "shows the status of the last build and failures unless a build number is supplied"
  def status(build=nil)
    build = get_last_build_for_branch unless build
    puts "beep boop here is the status of the most recent build:"
  end

  no_commands do
    def check_set(name, value)
      if value.nil?
        puts "This command requires a #{name} to be set. Either set with the --#{name}=#{name.upcase} for single run or configure your gem with the `configure` command"
      end
    end

    def config_query(key)
      #if config value is already set, ask if they want to change it
      cv = MyConfig.get(key)
      continue = true
      if !cv.nil?
        continue = yes?("`#{key}` is already set to #{cv}. Do you want to change it?")
      end
      return unless continue

      val = ask("Enter value for #{key}")
      MyConfig.set(key, val)
    end

    def get_last_build_for_branch
      res = CircleCi::Project.recent_builds_branch(@username, @project, current_branch)
      raise "something went haywire with that request for recent_builds_branch on branch: #{current_branch}
              response body is : #{res.body}" unless res.success?
      res.body.first["build_num"]
    end

    def current_branch
      Open3.popen3("git symbolic-ref --short HEAD") do |stdin, std_out, std_err, wait_thr|
        raise "something broke" unless std_err.read == ""
        branch = std_out.read
        branch.gsub("\n", "")
      end
    end
  end
end

Circle.start(ARGV)
